Multilang
=========


Introduction
------------

Multilang is a suite of tools to help in the building of a multi-lingual
Django project. Primarily it provides tools for storing dynamic multi-lingual
data and translatable urls.


Features
--------

* **Translatable Dynamic Data** - objects in the database can be made translatable. In the admin you will see tabs for every language and you can click on a tab to edit an objects translation in that language.

* **Translatable URLs** - the same page can have a different url in a different language. (eg /products/ can be /produits/ in French)


Installation
------------

* Add `multilang` to `INSTALLED_APPS` in your settings file
* Add the following middlewares to `MIDDLEWARE_CLASSES` in your settings file:
    * `multilang.middleware.URLCacheResetMiddleware` (must be before the `SessionMiddleware`)
    * `multilang.middleware.MultilangMiddleware`


Usage
-----

### Translatable URLs

Use the `turl` function in urlresolvers in place of the usual `url` function
when declaring URL patterns, combined with the `ugettext_noop` gettext function
and the URLs you declare will become translatable using the normal gettext
translation system.

Any language-aware models that define `get_absolute_url` should decorate it with
`multilang_permalink`, from `multilang.decorators` so that the returned URLs
will be properly translated to the language of the object. The method should
return a list or tuple with this pattern:

`('name_of_view_or_url', language_of_object, view_args, view_kwargs)`

`language_of_object` should be the language code of the object, so if the
model uses multilang's translatable DB solution, it would be `self.language`.


### Language Setting Via URL or Domain

Use LangInPathMiddleware and special root URLconf to embed the language code
in the URL path.

Use LangInDomainMiddleware and the `MULTILANG_LANGUAGE_DOMAINS` setting
to have language determination based on the domain name.*

This supersedes Django's usual language detection, so any language specific url
has a predictable language when visited. This also means that the individual,
language-specific resources of the site can all be identified by URL.

See `multilang/tests/settings.py` and `multilang/tests/lang_prefixed_urls.py`
for an example.

*Use the `multilang.utils.complete_url` utility function to build full urls
(ie. with the domain)


### Translatable DB

The two-model translation system that's provided here requires that you
manually specify a foreign key from your `LangTranslatable` model to your
`LangAgnostic` or "core" model. This FK should be named "core" and should
define its related_name as "translations". You also must define this
LangAgnostic model even if you have no "language agnostic" fields to put
in it, since it is used for finding translations.

See `multilang/tests/models.py` for an example.


### Translation Switching

Add MultilangMiddleware to the list of middleware classes and add the
"translate" context processor to the list of template context processors
to use the "`this_page_in_lang`" template tag. It will attempt to find
the URL that represents the page being displayed, but in the language requested.

Use the provided decorators to annotate any views whose translations should
be determined in a special way.

To make a model compatible with this system, it needs to implement a
`get_translation` method. The provided translatable DB solution does this.

NOTE: You should be aware of cases where equivalent translation does not exist. In this case "`this_page_in_lang`" will not return anything. You should either not use the "`this_page_in_lang`" tag or write your own custom translation scheme.


### Language Based Blocking

The BlockLocaleMiddleware will block non-admins from accessing the site in any language
listed in the `BLOCKED_LANGUAGES` setting in the settings file.


### Admin

Two ModelAdmin classes are provided under multilang.admin to create a better
workflow in the Django administration when adding and editing multilang models.
Subclass LangTranslatableModelAdmin and LangAgnosticModelAdmin accordingly when
creating admin classes for translatable model pairs.

Also make sure that the multilang/media folder is symlinked from your project's
media folder as multilang:

    ln -s path/to/multilang/media project_name/media/multilang

If you would like to hide translatable model admin links from the main admin
index page, you can set HIDE_TRANSLATABLE_APPS setting variable to True in
your settings.py file. If you do this, you have to make sure that your admin
url configuration is named "admin", as such:

    turl(_(r'^admin/(.*)'), admin.site.root, name='admin'),

See `multilang/tests/admin.py` for an example.
